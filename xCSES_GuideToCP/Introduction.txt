Introductory Programming Techniques : 

    #SHORTENING OF THE CODE#

1. The command typedef can be used to give a short name to a data type. For example, the name long long is long, so we can define a short name ll as follows:
    
    typedef long long ll;

    After this, the code
        long long a = 123456789;
        long long b = 987654321;
        cout << a*b << "\n";

    can be shortened as follows:
        ll a = 123456789;
        ll b = 987654321;
        cout << a*b << "\n";

2. Macros Another way to shorten code is to define macros. A macro specifies that certain strings in the code will be changed before the compilation. In C++, macros are defined using the #define keyword.For example, we can define the following macros:

    #define F first
    #define S second
    #define PB push_back
    #define MP make_pair

    After this, the code
        v.push_back(make_pair(y1,x1));
        v.push_back(make_pair(y2,x2));
        int d = v[i].first+v[i].second;

    can be shortened as follows:
        v.PB(MP(y1,x1));
        v.PB(MP(y2,x2));
        int d = v[i].F+v[i].S;

    A macro can also have parameters, which makes it possible to shorten loops and other structures. For example, we can define the following macro:
    
    #define REP(i,a,b) for (int i = a; i <= b; i++)
    
    After this, the code
        for (int i = 1; i <= n; i++) {
        search(i);
        }

    can be shortened as follows:
        REP(i,1,n) {
        search(i);
        }

    #RECURSIVE ALGORITHM#

/* Our first application of recursion is generating all subsets of a set of n elements. For example, the subsets of {1, 2, 3} are ∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, and {1, 2, 3}. The following recursive function search can be used to generate the subsets. The function maintains a vector that will contain the elements of each subset. The search begins when the function is called with the parameter 1*/
//Using Recursive Aglorithm
/* 
Approach: The idea is simple, that if there are n number of elements inside an array, there are two choices for every element. Either include that element in the subset or do not include it.
Using the above idea form a recursive solution to the problem. */


void search(int k)
{
    if (k == n + 1)
    {
        // process subset
    }
    else
    {
        // include k in the subset
        subset.push_back(k);
        search(k + 1);
        subset.pop_back();
        // don’t include k in the subset
        search(k + 1);
    }
}

        #BACKTRACKING#
    

